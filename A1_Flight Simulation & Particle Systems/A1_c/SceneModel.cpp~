///////////////////////////////////////////////////
//
//	Hamish Carr
//	October, 2023
//
//	------------------------
//	SceneModel.cpp
//	------------------------
//	
//	The model of the scene
//
//	
///////////////////////////////////////////////////

#include "SceneModel.h"
#include <cstdlib>
#include <math.h>
#include "Random.h"
#include <algorithm>
#include "Terrain.h"
#include "Matrix4.h"

// three local variables with the hardcoded file names
const char *groundModelName 	= "./models/landscape.dem";
const char *planeModelName 		= "./models/planeModel.tri";
const char *lavaBombModelName 	= "./models/lavaBombModel.tri";

const Homogeneous4 sunDirection(0.0, 0.3, 0.3, 1.0);
const GLfloat groundColour[4] = { 0.2, 0.6, 0.2, 1.0 };
const GLfloat sunAmbient[4] = {0.1, 0.1, 0.1, 1.0 };
const GLfloat sunDiffuse[4] = {0.7, 0.7, 0.7, 1.0 };
const GLfloat blackColour[4] = {0.0, 0.0, 0.0, 1.0};
const GLfloat lavaBombColour[4] = {0.5, 0.3, 0.0, 1.0};
const GLfloat planeColour[4] = {0.1, 0.1, 0.5, 1.0};
const GLfloat planeRadius = 2.0;
const GLfloat lavaBombRadius = 100.0;
const Cartesian3 chaseCamVector(0.0, -2.0, 0.5);


// constructor
SceneModel::SceneModel()
	{ // constructor
	// this is not the best place to put this in general, but this is a quick and dirty hack
	// we start by loading three files: one for each model
	groundModel.ReadFileTerrainData(groundModelName, 500);
	planeModel.ReadFileTriangleSoup(planeModelName);
	lavaBombModel.ReadFileTriangleSoup(lavaBombModelName);
	
//	When modelling, z is commonly used for "vertical" with x-y used for "horizontal"
//	When rendering, the default is that we render using screen coordinates, so x is to the right,
//	y is up, and z points behind us by the right hand rule.  That means when looking into the screen,
//	we are actually looking out along the z-axis
//	That means we will have to start off with a view matrix that compensates for this
//	Assume that we want to look out along the y axis with the z axis pointing up instead
//	Then the x-axis is off to the right.  This means that our mapping is as follows:
//		x is unchanged	from WCS					to VCS
//		y was forward 	in WCS		is now up		in VCS
//  	z was up		in WCS		is now back		in VCS
//	because x is unchanged, this is a rotation around x, with y moving towards z, so it is a
//	rotation of 90 degrees CCW

	// set the world to opengl matrix	
	world2OpenGLMatrix = Matrix4::RotateX(90.0) * Matrix4::Translate(Cartesian3(0, 0, -1500));
	light2OpenGLMatrix = Matrix4::RotateX(90.0);

	planePosition = Cartesian3(0,0,1500);
	
	//generateLavaBombs();
	} // constructor

// routine that updates the scene for the next frame
void SceneModel::Update()
	{ // Update()
	  
	  // count the position and rotation
	  updatePosition();	  

	  // generate lavabombs every 10 frame(1/6 second)
	  if (frameCounter >= 10) {
	    generateLavaBombs();
	    frameCounter = 0; 
	  }
	  else{
	    frameCounter++;
	  }

	  // update the lavabombs
	  updateLavaBombs();

	  //when lava collide each other or ground, destroy it
	  destroyLavaBomb();

	  //when plane collide ground, game over
	  isPLaneCollideGround();

	} // Update()

// routine to tell the scene to render itself
void SceneModel::Render()
	{ // Render()
	// enable Z-buffering
	glEnable(GL_DEPTH_TEST);
	
	// set lighting parameters
	glShadeModel(GL_FLAT);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHTING);
	glLightfv(GL_LIGHT0, GL_AMBIENT, sunAmbient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, sunDiffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, blackColour);
	glLightfv(GL_LIGHT0, GL_EMISSION, blackColour);
	
	// background is sky-blue
	glClearColor(0.7, 0.7, 1.0, 1.0);

	// clear the buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// compute the light position
	Homogeneous4 lightDirection = light2OpenGLMatrix * sunDirection;
	// world2OpenGLMatrix * sunDirection;
	// and set the w to zero to force infinite distance
 	lightDirection.w = 0.0;
 	 	
	// pass it to OpenGL
	glLightfv(GL_LIGHT0, GL_POSITION, &(lightDirection.x));

	// set a material colour for the ground
	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, groundColour);
	glMaterialfv(GL_FRONT, GL_SPECULAR, blackColour);
	glMaterialfv(GL_FRONT, GL_EMISSION, blackColour);
	groundModel.Render(world2OpenGLMatrix);

	// set a material colour for the lavaBombModel	
	//glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, lavaBombColour);
	//glMaterialfv(GL_FRONT, GL_SPECULAR, blackColour);
	//glMaterialfv(GL_FRONT, GL_EMISSION, blackColour);	
	//lavaBombModel.Render(lava2OpenGLMatrix);	
	for(auto& lavaBomb : lavaBombs)
	{
	  glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, lavaBombColour);
	  glMaterialfv(GL_FRONT, GL_SPECULAR, blackColour);
	  glMaterialfv(GL_FRONT, GL_EMISSION, blackColour);
	  //Matrix4 resultMatrix = traslationMatrix * rotationMatrix * lavaBomb.matrix;
	  //lavaBombModel.Render(resultMatrix);

	  lavaBombModel.Render(lavaBomb.matrix);
	}
	
	/*
	// set a material colour for the planeModel
	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, planeColour);
	glMaterialfv(GL_FRONT, GL_SPECULAR, blackColour);
	glMaterialfv(GL_FRONT, GL_EMISSION, blackColour);	
	planeModel.Render(plane2OpenGLMatrix);
	*/
	} // Render()	

void SceneModel::RotateYaw(float angle){angleYaw += angle;planeYaw += angle;}

void SceneModel::RotatePitch(float angle){anglePitch += angle;planePitch += angle;}

void SceneModel::RotateRoll(float angle){angleRoll += angle;planeRoll += angle;}

void SceneModel::ChangeSpeed(float newSpeed){planeSpeed += newSpeed;}

void SceneModel::SetSpeed(float newSpeed){planeSpeed = newSpeed;}

void SceneModel::updatePosition()
{
  //float deltaTime = 0.0167f;  // 0.01666s/frame
  float speedFactor = planeSpeed*10;// * deltaTime;  // Adjust the speed based on time
  float speedX = speedFactor * sin(angleYaw * M_PI / 180.0f);
  float speedY = speedFactor * sin(anglePitch * M_PI / 180.0f);
  float speedZ = speedFactor * cos(angleYaw * M_PI / 180.0f);

  posX = speedX;
  posY = speedY;
  posZ = speedZ;

  // count the plane position
  planePosition.x += speedFactor * cos(planeYaw * M_PI / 180.0f) * cos(planePitch * M_PI / 180.0f);
  planePosition.y += speedFactor * sin(planeYaw * M_PI / 180.0f) * cos(planePitch * M_PI / 180.0f);
  planePosition.z += speedFactor * sin(planePitch * M_PI / 180.0f);

  // count the rotate matrix
  rotationMatrix =
    Matrix4::RotateY(angleYaw) *
    Matrix4::RotateX(anglePitch) *
    Matrix4::RotateZ(angleRoll);

  traslationMatrix =
    Matrix4::Translate(Cartesian3(posX, posY, posZ));
  
  // ture zero
  angleYaw = anglePitch = angleRoll = 0;

  // light change
  light2OpenGLMatrix =
    rotationMatrix *
    light2OpenGLMatrix;
  
  // scene change
  world2OpenGLMatrix =
    traslationMatrix *
    rotationMatrix *
    world2OpenGLMatrix;
}


void SceneModel::generateLavaBombs()
{  
  LavaBomb lavaBomb;

  lavaBomb.matrix = world2OpenGLMatrix * Matrix4::Translate(lavaBomb.position);
  
  lavaBombs.push_back(lavaBomb);
}


void SceneModel::updateLavaBombs()
{
  float gravity = 9.8f;
  for(auto& lavaBomb : lavaBombs)
  {
    lavaBomb.Update( gravity, world2OpenGLMatrix);
  }
}


bool SceneModel::isLavaCollideLava(LavaBomb a, LavaBomb b)
{
  float dx = a.position.x - b.position.x;
  float dy = a.position.y - b.position.y;
  float dz = a.position.z - b.position.z;

  float distance = sqrt(dx*dx + dy*dy + dz*dz);

  if(distance <= 2 * lavaBombRadius){
    //std::cout<<"Lavas collided."<<std::endl;    
    return true;
  }
  return false;  
}


bool SceneModel::isLavaCollidePlane(LavaBomb a)
{  
  float dx = a.position.x - planePosition.x;
  float dy = a.position.y - planePosition.y;
  float dz = a.position.z - planePosition.z;

  float distance = sqrt(dx*dx + dy*dy + dz*dz);

  if(distance <= lavaBombRadius + planeRadius){
    std::cout<<"You Dead! the plane collided the lava."<<std::endl;
    exit(0);
    return true;
  }
  return false; 
}


bool SceneModel::isLavaCollideGround(LavaBomb a)
{
  float groundHeight = groundModel.getHeight(a.position.x, a.position.y);
  if(a.position.z - groundHeight <= 0){
    return true;
  }
  return false;
}

bool SceneModel::isPLaneCollideGround()
{
  float groundHeight = groundModel.getHeight(planePosition.x,planePosition.y);
  //std::cout << planePosition.x << " " << planePositiony << " " << planePositionz << std::endl;
  //std::cout << groundHeight << std::endl;
  if(planePosition.z - groundHeight<= 0){
    std::cout<<"You Dead! the plane collided the ground."<<std::endl;
    exit(0);
    return true;
  }
  return false;
}

void SceneModel::destroyLavaBomb(){
  for (size_t i = 0; i < lavaBombs.size(); ++i)
  {
    for (size_t j = i + 1; j < lavaBombs.size(); ++j)
    {
      if (isLavaCollideLava(lavaBombs[i], lavaBombs[j]))
      {
	//std::cout<<"LavaBombs collided each other, One of it will be destory."<<std::endl;
	lavaBombs.erase(lavaBombs.begin() + j);	
	--j;
      }
    }
  }
  for (size_t i = 0; i < lavaBombs.size(); ++i)
  {
    if(isLavaCollideGround(lavaBombs[i]))
    {
      //std::cout<<"LavaBombs collided Ground, it has be destory."<<std::endl;
      lavaBombs.erase(lavaBombs.begin() + i);
      --i;
    }
  }
}
